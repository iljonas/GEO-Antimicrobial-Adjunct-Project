suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
geneLocSep <- function(gList){
gList <- list(gList)
geneLocs <- as.integer(sapply(gList, function(x) {grep("^[a-z]",x)}))
genes <- unlist(gList)[geneLocs]
loci <- ifelse(is.na(geneLocs), unlist(gList), unlist(gList)[-geneLocs])
return(list(genes,loci))
}
user <- as.character(Sys.info()["user"])
primary.pathway <- file.path('C:', 'Users', user, 'Documents', 'Capstone Files', 'GEO-Antimicrobial-Adjunct-Project', 'Output_Files')
uniprot.pathway <- file.path(primary.pathway, 'UniProt_Downloads', 'uniProt_output.tsv.gz')
master.pathway <- file.path(primary.pathway, 'Exports', 'output.tsv.gz')
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
mutate(Gene.names = gsub('; ', ';', Gene.names)) %>%
mutate(Sep.names = strsplit(as.character(Gene.names), ';')) %>%
unnest(Sep.names) %>%
mutate(Sep.groups = strsplit(Sep.names, ' '))
View(groupedData)
split.names <- sapply(groupedData$Sep.groups, geneLocSep) %>%
t %>%
as.data.frame
View(split.names)
names(split.names) <- c("Genes", "Loci")
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families, -Gene.names...primary..) %>%
mutate(Loci = gsub(Loci, '(\..|[a-z])$', '')) %>%
mutate(Gene = gsub(Gene, '_', ''))
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families, -Gene.names...primary..) %>%
mutate(Loci = gsub(Loci, '(\\..|[a-z])$', '')) %>%
mutate(Gene = gsub(Gene, '_', ''))
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families) %>%
mutate(Loci = gsub(Loci, '(\\..|[a-z])$', '')) %>%
mutate(Gene = gsub(Gene, '_', ''))
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families) %>%
mutate(Loci = gsub(Loci, '(\\..|[a-z])$', '')) %>%
mutate(Gene = gsub(Genes, '_', ''))
View(newData)
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families)
View(newData)
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families) %>%
#mutate(Loci = gsub(Loci, '(\\..|[a-z])$', '')) %>%
mutate(Gene = gsub(Genes, '_', ''))
?gsub
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families) %>%
#mutate(Loci = gsub(Loci, '(\\..|[a-z])$', '')) %>%
mutate(Gene = gsub('_', '', Genes))
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families) %>%
mutate(Loci = gsub('(\\..|[a-z])$', '', Loci)) %>%
mutate(Gene = gsub('_', '', Genes))
View(newData)
master <- read.csv(gzfile(master.pathway), sep = '\t', stringsAsFactors = FALSE)
View(master)
uni.master <- merge(newData, master, by.x = 'Queried.ID', by.y = 'Ã¯..Name', all.y = TRUE) %>%
unique %>%
mutate(Queried.ID = if_else(!is.na(Loci), Loci, if_else(Source == 'Protein' & !is.na(Entry) & Queried.ID != Entry
, Entry, Queried.ID)))
View(master)
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
mutate(Queried.ID = strsplit(as.character(Queried.ID), 'x'))
View(groupedData)
?unnest
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
mutate(Queried.ID = strsplit(as.character(Queried.ID), 'x')) %>%
unnest(Queried.ID) %>%
mutate(Gene.names = gsub('; ', ';', Gene.names)) %>%
mutate(Sep.names = strsplit(as.character(Gene.names), ';')) %>%
unnest(Sep.names) %>%
mutate(Sep.groups = strsplit(Sep.names, ' '))
View(groupedData)
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
unnest(Queried.ID = strsplit(as.character(Queried.ID), 'x')) %>%
mutate(Gene.names = gsub('; ', ';', Gene.names)) %>%
mutate(Sep.names = strsplit(as.character(Gene.names), ';')) %>%
unnest(Sep.names) %>%
mutate(Sep.groups = strsplit(Sep.names, ' '))
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
unnest(Queried.ID = strsplit(as.character(Queried.ID), 'x')) %>%
mutate(Gene.names = gsub('; ', ';', Gene.names)) %>%
unnest(Sep.names = strsplit(as.character(Gene.names), ';')) %>%
mutate(Sep.groups = strsplit(Sep.names, ' '))
View(groupedData)
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
unnest(Queried.ID = strsplit(as.character(Queried.ID), ',')) %>%
mutate(Gene.names = gsub('; ', ';', Gene.names)) %>%
unnest(Sep.names = strsplit(as.character(Gene.names), ';')) %>%
mutate(Sep.groups = strsplit(Sep.names, ' '))
View(groupedData)
split.names <- sapply(groupedData$Sep.groups, geneLocSep) %>%
t %>%
as.data.frame
names(split.names) <- c("Genes", "Loci")
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID:Protein.names, Loci, Genes, Organism:Protein.families) %>%
mutate(Loci = gsub('(\\..|[a-z])$', '', Loci)) %>%
mutate(Gene = gsub('_', '', Genes))
master <- read.csv(gzfile(master.pathway), sep = '\t', stringsAsFactors = FALSE)
uni.master <- merge(newData, master, by.x = 'Queried.ID', by.y = 'Expression.ID', all.y = TRUE) %>%
unique %>%
mutate(Queried.ID = if_else(!is.na(Loci), Loci, if_else(Source == 'Protein' & !is.na(Entry) & Queried.ID != Entry
, Entry, Queried.ID)))
View(newData)
View(groupedData)
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID, Status, Protein.names, Loci, Genes, Protein.families:Sequence) %>%
mutate(Loci = gsub('(\\..|[a-z])$', '', Loci)) %>%
mutate(Gene = gsub('_', '', Genes))
uni.master <- merge(newData, master, by.x = 'Queried.ID', by.y = 'Expression.ID', all.y = TRUE) %>%
unique %>%
mutate(Queried.ID = if_else(!is.na(Loci), Loci, if_else(Source == 'Protein' & !is.na(Entry) & Queried.ID != Entry
, Entry, Queried.ID)))
View(newData)
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Queried.ID, Entry:Protein.names, Loci, Genes, Protein.families:Sequence) %>%
mutate(Loci = gsub('(\\..|[a-z])$', '', Loci)) %>%
mutate(Gene = gsub('_', '', Genes))
uni.master <- merge(newData, master, by.x = 'Queried.ID', by.y = 'Expression.ID', all.y = TRUE) %>%
unique %>%
mutate(Queried.ID = if_else(!is.na(Loci), Loci, if_else(Source == 'Protein' & !is.na(Entry) & Queried.ID != Entry
, Entry, Queried.ID)))
View(uni.master)
groupedData <- read.csv(gzfile(uniprot.pathway), sep = '\t', stringsAsFactors = FALSE) %>%
unnest(Expression.ID = strsplit(as.character(Expression.ID), ',')) %>%
mutate(Gene.names = gsub('; ', ';', Gene.names)) %>%
unnest(Sep.names = strsplit(as.character(Gene.names), ';')) %>%
mutate(Sep.groups = strsplit(Sep.names, ' '))
split.names <- sapply(groupedData$Sep.groups, geneLocSep) %>%
t %>%
as.data.frame
names(split.names) <- c("Genes", "Loci")
newData <- data.frame(groupedData, split.names) %>%
unnest(Loci, .drop = FALSE) %>%
unnest(Genes, .drop = FALSE) %>%
select(Expression.ID, Entry:Protein.names, Loci, Genes, Protein.families:Sequence) %>%
mutate(Loci = gsub('(\\..|[a-z])$', '', Loci)) %>%
mutate(Gene = gsub('_', '', Genes))
master <- read.csv(gzfile(master.pathway), sep = '\t', stringsAsFactors = FALSE)
uni.master <- merge(newData, master, by = 'Expression.ID', all.y = TRUE) %>%
unique %>%
mutate(Expression.ID = if_else(!is.na(Loci), Loci, if_else(Source == 'Protein' & !is.na(Entry) & Expression.ID != Entry
, Entry, Expression.ID)))
View(uni.master)
write.table(uni.master, file = gzfile(file.path(primary.pathway, 'Exports', 'master_output.tsv.gz')),
sep = '\t', na = 'NA', row.names = FALSE)
user.input <- c('GSE26400', 'output', 'Strain')
output.path <- paste0(file.path(folderPath(), 'Output_Files', 'Exports'), user.input[2], 'tsv.gz')
folderPath <- function(){
userID <- Sys.info()["user"]
folder <- file.path('C:', 'Users', userID, 'Documents', 'Capstone Files', 'GEO-Antimicrobial-Adjunct-Project')
}
output.path <- paste0(file.path(folderPath(), 'Output_Files', 'Exports'), user.input[2], 'tsv.gz')
file.exists(output.path)
output.path
output.path <- paste0(file.path(folderPath(), 'Output_Files', 'Exports', user.input[2]), 'tsv.gz')
output.path
output.path <- paste(file.path(folderPath(), 'Output_Files', 'Exports', user.input[2]), 'tsv', 'gz', sep = '.')
output.path
file.exists(output.path)
command.string <- if_else(file.exists(output.path),
"read.csv(gzfile(output.path), sep = '\t', na.strings = c('', 'NA'), stringsAsFactors = FALSE)",
"data.frame(Expression.ID = character(), Source = character(), stringsAsFactors = FALSE)")
prev.comb.master <- eval(parse(text = command.string))
